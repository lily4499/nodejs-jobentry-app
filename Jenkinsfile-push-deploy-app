pipeline {
    agent any 

    options {
        timeout(time: 10, unit: 'MINUTES')
    }

    environment {
        AWS_REGION = 'us-east-1'
        ECR_REGISTRY = '637423529262.dkr.ecr.us-east-1.amazonaws.com' // Replace with your ECR registry URI
        IMAGE_NAME = 'jobentry'
        IMAGE_TAG = 'v1.0.0'
        AWS_PROFILE = 'ecr-eks-user1' // AWS profile
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID_1')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY_1')
        EKS_CLUSTER_NAME = 'lili-eks-cluster' // Change to your EKS cluster name
    }

    stages { 
        stage('Build Docker image') {
            steps {
                script {
                    def dockerImage = docker.build("${ECR_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}", '.') 
                }
            }
        } 

        stage('Login to AWS') {
            steps {
                sh '''
                aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile $AWS_PROFILE
                aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile $AWS_PROFILE
                aws configure set region $AWS_REGION --profile $AWS_PROFILE
                $(aws ecr get-login-password --region $AWS_REGION --profile $AWS_PROFILE | docker login --username AWS --password-stdin $ECR_REGISTRY)
                '''
            }
        }

        stage('Upload Image to ECR') {
            steps {   
                script {
                    docker.withRegistry("https://${ECR_REGISTRY}") {
                        sh "docker push ${ECR_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Update kubeconfig') {
            steps {
                sh '''
                    aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME --profile $AWS_PROFILE
                '''
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    sh 'kubectl apply -f deployment.yml'
                }
            }
        }
    }
}
